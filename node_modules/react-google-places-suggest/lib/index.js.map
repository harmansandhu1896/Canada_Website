{"version":3,"sources":["../src/index.js"],"names":["GooglePlacesSuggest","state","coordinate","googleMaps","focusedSuggestIndex","selectedLabel","suggests","handleKeyDown","bind","updateSuggests","props","search","nextProps","suggest","onSelectSuggest","geocodeSuggest","description","setState","suggestRadius","suggestTypes","suggestComponentRestrictions","autocompleteService","places","AutocompleteService","getPlacePredictions","input","location","LatLng","radius","types","componentRestrictions","googleSuggests","suggestLabel","callback","geocoder","Geocoder","geocode","address","results","status","GeocoderStatus","OK","geometry","latitude","lat","longitude","lng","title","e","length","key","handleSelectSuggest","focusSuggest","index","textNoResults","structured_formatting","firstMatchedString","main_text_matched_substrings","shift","labelParts","before","substr","offset","matched","after","renderSuggest","renderDefaultSuggest","map","renderNoResults","children","renderSuggests","propTypes","any","isRequired","object","func","string","number","array","defaultProps","country"],"mappings":"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","file":"index.js","sourcesContent":["import React, {Component, PropTypes} from \"react\"\n\nclass GooglePlacesSuggest extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      coordinate: null,\n      googleMaps: null,\n      focusedSuggestIndex: 0,\n      selectedLabel: \"\",\n      suggests: [],\n    }\n\n    this.handleKeyDown = this.handleKeyDown.bind(this)\n  }\n\n  componentWillMount() {\n    this.updateSuggests(this.props.search)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.updateSuggests(nextProps.search)\n  }\n\n  handleSelectSuggest(suggest) {\n    const {onSelectSuggest} = this.props\n\n    this.geocodeSuggest(suggest.description, () => {\n      this.setState({selectedLabel: suggest.description, suggests: []}, () => {\n        onSelectSuggest(suggest, this.state.coordinate)\n      })\n    })\n  }\n\n  updateSuggests(search) {\n    const {googleMaps, suggestRadius, suggestTypes, suggestComponentRestrictions} = this.props\n    const autocompleteService = new googleMaps.places.AutocompleteService()\n\n    if (!search) {\n      this.setState({suggests: []})\n      return\n    }\n\n    autocompleteService.getPlacePredictions({\n      input: search,\n      location: new googleMaps.LatLng(0, 0),\n      radius: suggestRadius,\n      types: suggestTypes,\n      componentRestrictions: suggestComponentRestrictions,\n    }, (googleSuggests) => {\n      if (!googleSuggests) {\n        this.setState({suggests: []})\n        return\n      }\n\n      this.setState({\n        focusedSuggestIndex: 0,\n        suggests: googleSuggests,\n      })\n    })\n  }\n\n  geocodeSuggest(suggestLabel, callback) {\n    const {googleMaps} = this.props\n    const geocoder = new googleMaps.Geocoder()\n\n    geocoder.geocode({address: suggestLabel}, (results, status) => {\n      if (status === googleMaps.GeocoderStatus.OK) {\n        const location = results[0].geometry.location\n        const coordinate = {\n          latitude: location.lat(),\n          longitude: location.lng(),\n          title: suggestLabel,\n        }\n\n        this.setState({coordinate}, callback)\n      }\n    })\n  }\n\n  handleKeyDown(e) {\n    const {focusedSuggestIndex, suggests} = this.state\n\n    if (suggests.length > 0) {\n      if (e.key === \"Enter\") {\n        this.handleSelectSuggest(suggests[focusedSuggestIndex])\n      } else if (e.key === \"ArrowUp\") {\n        if (suggests.length > 0 && focusedSuggestIndex > 0) {\n          this.focusSuggest(focusedSuggestIndex - 1)\n        }\n      } else if (e.key === \"ArrowDown\") {\n        if (suggests.length > 0 && focusedSuggestIndex < suggests.length - 1) {\n          this.focusSuggest(focusedSuggestIndex + 1)\n        }\n      }\n    }\n  }\n\n  focusSuggest(index) {\n    this.setState({focusedSuggestIndex: index})\n  }\n\n  renderNoResults() {\n    const {textNoResults} = this.props\n\n    if(textNoResults === null) {\n      return;\n    }\n\n    return (\n      <li className=\"placesSuggest_suggest\">\n        {textNoResults}\n      </li>\n    )\n  }\n\n  renderDefaultSuggest(suggest) {\n    const {description, structured_formatting} = suggest\n    const firstMatchedString = structured_formatting.main_text_matched_substrings.shift()\n    let labelParts = null\n\n    if (firstMatchedString) {\n      labelParts = {\n        before: description.substr(0, firstMatchedString.offset),\n        matched: description.substr(firstMatchedString.offset, firstMatchedString.length),\n        after: description.substr(firstMatchedString.offset + firstMatchedString.length),\n      }\n    }\n\n    return (\n      <div>\n        <span className=\"placesSuggest_suggestLabel\">\n          {labelParts\n            ? <span>\n                {labelParts.before.length > 0 ? <span>{labelParts.before}</span> : null}\n                <span className=\"placesSuggest_suggestMatch\">{labelParts.matched}</span>\n                {labelParts.after.length > 0 ? <span>{labelParts.after}</span> : null}\n              </span>\n            : description\n          }\n        </span>\n      </div>\n    )\n  }\n\n  renderSuggest(suggest) {\n    const {renderSuggest} = this.props\n    return renderSuggest\n      ? this.renderSuggest(suggest)\n      : this.renderDefaultSuggest(suggest)\n  }\n\n  renderSuggests() {\n    const {focusedSuggestIndex, suggests} = this.state\n    return (\n      <ul className=\"placesSuggest_suggests\">\n        {suggests.length > 0\n          ? suggests.map((suggest, key) => (\n            <li\n              key={key}\n              className={`placesSuggest_suggest ${focusedSuggestIndex === key && \"placesSuggest_suggest-active\"}`}\n              onClick={() => this.handleSelectSuggest(suggest)}\n            >\n              {this.renderSuggest(suggest)}\n            </li>\n          ))\n          : this.renderNoResults()\n        }\n      </ul>\n    )\n  }\n\n  render() {\n    const {selectedLabel} = this.state\n    const {children, search} = this.props\n    return (\n      <div className=\"placesSuggest\" onKeyDown={this.handleKeyDown}>\n        {children}\n        {search && selectedLabel !== search && this.renderSuggests()}\n      </div>\n    )\n  }\n}\n\nGooglePlacesSuggest.propTypes = {\n  children: PropTypes.any.isRequired,\n  googleMaps: PropTypes.object.isRequired,\n  onSelectSuggest: PropTypes.func,\n  renderSuggest: PropTypes.func,\n  search: PropTypes.string,\n  suggestRadius: PropTypes.number,\n  suggestTypes: PropTypes.array,\n  suggestComponentRestrictions: PropTypes.object,\n  textNoResults: PropTypes.string,\n}\n\nGooglePlacesSuggest.defaultProps = {\n  onSelectSuggest: () => {},\n  search: \"\",\n  suggestRadius: 20,  \n  suggestTypes: [],\n  suggestComponentRestrictions: {\n    country: \"\"\n  },\n  textNoResults: \"No results\",\n}\n\nexport default GooglePlacesSuggest\n"]}